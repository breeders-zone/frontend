# This workflow will do a clean install of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Stage

on:
  push:
    branches: [ dev ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Check Out Repo
      uses: actions/checkout@v2

    - name: Login to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v1

    - name: Build and push
      id: docker_build
      uses: docker/build-push-action@v2
      with:
        context: .
        file: ./Dockerfile
        builder: ${{ steps.buildx.outputs.name }}
        push: true
        build-args: |
          API_BASE_PATH=${{secrets.DEV_API_BASE_PATH}}
          DOCKER_API_BASE_PATH=${{secrets.DEV_DOCKER_API_BASE_PATH}}
          FIREBASE_API_KEY=${{secrets.DEV_FIREBASE_API_KEY}}
          FIREBASE_AUTH_DOMAIN=${{secrets.DEV_FIREBASE_AUTH_DOMAIN}}
          FIREBASE_DATABASE_URL=${{secrets.DEV_FIREBASE_DATABASE_URL}}
          FIREBASE_PROJECT_ID=${{secrets.DEV_FIREBASE_PROJECT_ID}}
          FIREBASE_STORAGE_BUCKET=${{secrets.DEV_FIREBASE_STORAGE_BUCKET}}
          FIREBASE_MESSAGING_SENDER_ID=${{secrets.DEV_FIREBASE_MESSAGING_SENDER_ID}}
          FIREBASE_APP_ID=${{secrets.DEV_FIREBASE_APP_ID}}
          YANDEX_METRIKA_ID=${{secrets.YANDEX_METRIKA_ID}}
        tags:  ${{ secrets.DOCKER_HUB_USERNAME }}/web:dev
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache
    - name: Image digest
      run: echo ${{ steps.docker_build.outputs.digest }}
  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to Digital Ocean droplet via SSH action
        uses: appleboy/ssh-action@v0.1.4
        with:
          host: ${{ secrets.DEV_HOST }}
          username: ${{ secrets.DEV_USERNAME }}
          password: ${{ secrets.DEV_PASSWORD }}
          port: ${{ secrets.DEV_PORT }}
          script: |
            cd /var/www

            docker-compose pull web
            docker-compose stop web
            docker-compose rm -f web
            docker-compose up -d --force-recreate nginx
